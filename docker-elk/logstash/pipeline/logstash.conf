input {
  tcp {
    port => 5000
    type => syslog
  }
  udp {
    port => 5000
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{MONTHNUM:month}-%{MONTHDAY:day} +%{TIME:time} +%{NUMBER:pid1} +%{NUMBER:pid2} +%{WORD:log_prio} +%{WORD:log_type}: +%{GREEDYDATA:message}" }
      overwrite => [ "message" ]
      add_field => {"[log_timestamp]" => "%{+y}-%{month}-%{day} %{time}"}
    }

    date {
      match => ["log_timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
      target => "@timestamp"
    }

    mutate {
        remove_field => [ "month", "day", "time", "log_timestamp" ]
    }

    if [log_type] == "BatteryService" {
      grok {
        match => { "message" => "level:%{NUMBER:battery_level}.*?temperature: +%{NUMBER:battery_temperature}.*" }
        match => { "message" => ".*" }
      }
      if "_grokparsefailure" in [tags] { drop {} }
    }

    if [log_type] == "ConnectivityService" {
      grok {
        match => { "message" => "notifyType.*MOBILE.+?\(%{WORD:mobile_network}.*" }
        match => { "message" => ".*" }
      }
      if "_grokparsefailure" in [tags] { drop {} }
    }

    if [log_type] == "PowerManagerService" {
      grok {
        match => { "message" => "Going.+to.+sleep.*" }
        match => { "message" => "Waking.+up.+from.+sleep.*"}
      }

      if [message] =~ /Going.+to.+sleep.*/ {
        mutate {
          add_field => [ "sleep", "true" ]
        }
      }

      if [message] =~ /Waking.+up.+from.+sleep.*/ {
        mutate {
          add_field => [ "sleep", "false" ]
        }
      }    

      if "_grokparsefailure" in [tags] { drop {} }
    }
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
  stdout { codec => rubydebug }
}


